                                                                                          Python Book Programs in GitHub
# Example 1.1
# Bonus Calculation
salary = int(input(" Type Your Salary: "))
bonus = (10/100) * salary
print(f"Bonus = Rs. {bonus:8.2f} ")

# Example 1.2
# Discount Calculation
bill_amount = int(input(" Type Bill Amount: "))
discount = (7.5/100) * bill_amount
print(f"Discount = Rs. {discount:8.2f}")

# Example 1.3
# Dollar to Rupee conversion Version 2
dollars = int(input(" Type Amount in Dollars: "))
conversion_rate = float(input("Type Conversion Rate: "))
rupees = conversion_rate * dollars
print(f"$ {dollars}  = Rs. {rupees:8.2f}")

# Example 1.4
# Program to calculate Simple Interest
# Input Part
principal     = int(input(" Type Principal: "))
years         = int(input(" Type Period of Deposit: "))
interest_rate = float(input(" Type Interest Rate: "))
#Calculation Part
simple_interest	= (principal * years * interest_rate) / 100
#Output Part
print(f"Simple Interest = Rs. {simple_interest:8.2f}")

# Example 2.1
# Profession Tax calculation
salary = int(input(" Type Your Salary: "))
if salary >= 45000:
  profession_tax = 0.10 * salary
  print(f"Profession Tax = Rs. {profession_tax:8.2f}")

# Example 2.2
# Service Charge Calculation
room_rent = int(input(" Type Hotel Room Rent: "))
if room_rent >= 5000:
  service_charge = 0.12 * room_rent
  print(f"Service Charge = Rs. {service_charge}")
else:
  service_charge = 0.06 * room_rent
  print(f"Service Charge = Rs. {service_charge:8.2f}")

# Example 2.3
# Program to calculate Median
values = list(eval(input(" Type the Marks: ")))
values = sorted(values)
size = len (values)

if size % 2 == 1:
	mid = size // 2
	median = values [mid]
	print (f"Median Mark = {median}")
else:
	mid = size // 2
	mid1 = mid -1
	median = (values [mid]+ values[mid1])/2
	print (f"Median Mark = {median}")

# Example 2.4
# Program to find the elder person
age1 = int(input("Type First Person's Age: "))
age2 = int(input("Type Second Person's Age: "))
if age1 > age2:
  print("First Person is the Elder")
elif age2 > age1:
  print("Second Person is the Elder")
else:
  print("Both Persons are of same age")

# Example 2.5
# Program for Bonus Calculation
category = input("Type the category of Employee(Executive/Technician): ")
salary = int(input("Type the Salary of Employee: "))
if category == "Executive":
  if salary > 100000:
    bonus = 0.30 * salary
  else:
    bonus = 0.20 * salary
else:
  bonus = 0.10 * salary

print(f"Category:{category} ")
print(f"Salary  :{salary} ")
print(f"Bonus   :{bonus : 8.2f} ")

# Example 2.6
# Program to find the sum of digits in a Number
number = int(input("Type a Number: "))
sum = 0
while number != 0:
  digit = number % 10
  sum = sum + digit
  number = number // 10
print(f"Sum of digits in the given number is {sum}")

# Example 2.7
# Program to find the Lucky Number
number = int(input("Type the digits in Date of Birth: "))
while number > 9:
  sum = 0
  while number != 0:
    digit = number % 10
    sum = sum + digit
    number = number // 10
  number = sum

print(f"Lucky Number is {number}")

# Example 2.8 
# Program to display Miles and Corresponding Kilometres
for i in range(1,11):
  kilometres = i *1.6
  print(f"Miles = {i}  Kilometres =  {kilometres : 8.2f}")

# Example 2.9
# Program to find multiples of three or five
for i in range(1,11):
  if i%3 == 0 or i%5 == 0:
    print(i)

# Example 2.10
# Program to find factorial of a number
number = int(input("Type a Number: "))
factorial = 1
for i in range(1 , number+1):
  factorial = factorial * i
print(f"Factorial of {number} = {factorial} ")

# Example 2.11
# Program to find whether a Number is a Prime Number
# Program to find whether a given Number is a Prime No.
number = int(input("Type a Number: "))
for i in range(2,number):
  if number % i == 0:
    print(f"{number} is not a Prime Number")
    break
else:
  print(f"{number} is a Prime Number")

# Example 3.1 
# Program to find n c r value
# Function to calculate factorial
def factorial(n):
  value = 1
  for i in range(1 , n+1):
    value = value * i
  return value
# Main Code
n = int(input("Type the value of N: "))
r = int(input("Type the value of R: "))
ncr_value = factorial(n)/(factorial(n-r)*factorial(r))
print(f"Value of {n} c {r} = {ncr_value} ")

# Example 3.2
# Program to find nth root using a Function
# Function to find nth root
def nthRoot(x,n):
  return x ** (1/n)
# Main Code
x = int(input("Type the value of x: "))
n = int(input("Type the value of n: "))

root = nthRoot(x,n)
print(f"{n}th root of {x} is: {root}")

# Example 3.3
# Program to generate random numbers using a Function
# Function to generate random numbers in a given range
import random
def randomInRange(x,y):
  return random.randrange(x,y)
# Main Code
x = int(input("Type the first number of range: "))
y = int(input("Type the last number of range: "))
for i in range(0,3):
  print(randomInRange(x,y))

# Example 3.4 
# Program to check validity of a Phone Number using a Function
# Function to check validity of a Phone Number
def checkPhoneNumber(number):
  print (number)
  print (len(number))
  if len(number) != 12:
    return False
  if number[3] != '-':
    return False
  number = number[:3] + number[4:]
  print (number)
  if number[6] != '-':
    return False
  number = number[:6] + number[7:]
  print (number)
  print( number.isdigit())
  return number.isdigit()
# Main Code
phoneNumber = input("Type a Phone Number:")
if checkPhoneNumber(phoneNumber):
  print("valid")
else:
  print("Invalid")

# Example 3.5
# Program to calculate simple interest using a Function
# Function to calculate simple interest
def simple_interest(p,n,r):
  return (p*n*r)/100
# Main Code
principal     = int(input(" Type Principal: "))
years         = int(input(" Type Period of Deposit: "))
interest_rate = float(input(" Type Interest Rate: "))
interest	= simple_interest(principal,years,interest_rate)
print(f"Simple Interest = Rs. {interest:8.2f}")

# Example 3.6
# Program to calculate compond interest using a Function
# Function to calculate compound interest
def compound_interest(p,n,r):
  return (p*(1+(r/100))**n) - p
# Main Code
principal     = int(input(" Type Principal: "))
years         = int(input(" Type Period of Deposit: "))
interest_rate = float(input(" Type Interest Rate: "))
interest	= compound_interest(principal,years,interest_rate)
print(f"Compound Interest = Rs. {interest:8.2f}")

# Example 3.7
# Program to calculate mean and standard deviation using a Function
# Function to calculate mean and standard deviation
import math
def mean_and_sd(data):
  mean = sum(data)/len(data)
  sum_of_squares = 0
  for i in range(0,len(data)):
    sum_of_squares = sum_of_squares + (data[i] - mean) ** 2
  var = sum_of_squares/len(data)
  std_deviation =  math.sqrt(var)
  return mean , std_deviation
# Main code
values = list(eval(input("Type a list of values: ")))
average, sd = mean_and_sd(values)
print(f"Average = {average}")
print(f"Standard Deviation = {sd}")

# Example 3.8
# Program to calculate compound interest
# Function to calculate compound interest
def compound_interest(p,n,r = 10):  # Default Parameter
  return (p*(1+(r/100))**n) - p
# Main Code
customer_type = input(" Cutomer Type(HNI/Others): ")
if customer_type == "HNI":
  principal     = int(input(" Type Principal: "))
  years         = int(input(" Type Period of Deposit: "))
  interest_rate = float(input(" Type Interest Rate: "))
  interest	= compound_interest(principal,years,interest_rate)
else:
  principal     = int(input(" Type Principal: "))
  years         = int(input(" Type Period of Deposit: "))
  interest	= compound_interest(principal,years)

print(f"Compound Interest = Rs. {interest:8.2f}")

# Example 4.1 
# Program to draw Line Chart
# Import Libraries
import matplotlib.pyplot as plt
# %matplotlib inline
# Specify Data
years = [1960,1970,1980,1990,2000,2010,2020]
gdp = [300.2,543.3,1075.9,2862.5,5979.6,10289.7,14958.3]
# Draw a Line Chart
plt.plot(years, gdp, color = 'blue', marker = 'o', linestyle = 'solid')
plt.title("GDP Growth")
plt.xlabel("Year")
plt.ylabel("GDP in Billions ")
plt.show()

# Example 4.2
# Program to draw Bar Chart
# Import Libraries
import matplotlib.pyplot as plt
# %matplotlib inline
# Specify Data
movies = ["Annie Hall","Ben-Hur","Casablanca","Gandhi","WestSide Story"]
num_oscars = [5,11,3,8,10]
colors = ['b','g','r','c','m']
# Draw a Bar Chart
plt.bar(range(0,len(movies)),num_oscars, color = colors, align = 'center')
plt.title("My Favourite Movies")
plt.xlabel("Movie Name")
plt.ylabel("No. of Oscar Awards")
plt.xticks(range(0,len(movies)), movies)
plt.show()

# Example 4.3
# Program to draw Pie Chart
# Import Libraries
import matplotlib.pyplot as plt
# %matplotlib inline
# Specify Data
labels = ["Raw Materials","Labour","Rent","Electricity"]
values = [30,90,30,30]
colors = ['b','g','r','c']
explode = (0.05,0.05,0.05,0.05)
# Draw a Pie Chart
plt.pie(values, labels = labels, colors = colors, explode = explode, autopct='%1.1f%%', shadow = True)
plt.show()

# Example 4.4 
# Program to draw Histogram
# Import Libraries
import matplotlib.pyplot as plt
#%matplotlib inline
import numpy as np
# Specify Data
values = [44,6,35,23,11,4,35,27,19,13,21,32,17,
          29,38,33,14,25,37,15,25,22,28,24,26,47]
# Draw a Histogram
plt.hist(values , bins = 5)
plt.show()

# Example 4.4 - Version 2
# Program to draw Histogram
import matplotlib.pyplot as plt
#%matplotlib inline
import numpy as np
values = np.random.randn(1000)
plt.hist(values, bins = 40, density = True, alpha = 0.3,
         histtype = 'stepfilled',color = 'steelblue', edgecolor = 'none')
plt.show()

# Example 4.5 
# Program to draw Scatter Plot
# Import Libraries
import matplotlib.pyplot as plt
#%matplotlib inline
import numpy as np
# Specify Data
x = [65, 66,67,67,68,69,70,72,64,67,66,68,67,70,69,73]
y = [67,68,65,68,72,72,69,71,66,69,64,69,71,73,68,72]
# Draw a Scatter Diagram
plt.scatter(x, y, marker = '*')
plt.show()

# Example 4.5 - Version 2
# Program to draw Scatter Plot
# Import Libraries
import matplotlib.pyplot as plt
#%matplotlib inline
import numpy as np
# Specify Data
x = np.random.randn(100)
y = np.random.randn(100)
colors = np.random.rand(100)
sizes = 1000 * np.random.rand(100)
# Draw a Scatter Diagram
plt.scatter(x, y, c = colors, s = sizes, alpha = 0.9, cmap = 'viridis', marker = 'o')
plt.show()

# Example 4.6 
# Line Plot using Seaborn
# Import Libraries
#%matplotlib inline
import seaborn as sns
# Specify Data
year = [1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960]
no_of_passengers = [1520,1676,2042,2364,2700,2867,3408,3939,4421,4572,5140,5714]
# Create Line Plot
sns.lineplot(x = year, y = no_of_passengers, color = 'r')
plt.title("Passenger Growth")
plt.xlabel("Year")
plt.ylabel("No. of Passengers ")
plt.show()

# Example 4.7 
# Bar Plot using Seaborn
# Import Libraries
#%matplotlib inline
import seaborn as sns
# Specify Data
movies = ["Annie Hall","Ben-Hur","Casablanca","Gandhi","WestSide Story"]
num_oscars = [5,11,3,8,10]
palette_color = sns.color_palette('bright')
# Draw a Bar Chart
sns.barplot(x = movies, y = num_oscars, color = 'g')
#plt.bar(range(0,len(movies)),num_oscars, color = colors, align = 'center')
plt.title("My Favourite Movies")
plt.xlabel("Movie Name")
plt.ylabel("No. of Oscar Awards")
#plt.xticks(range(0,len(movies)), movies)
plt.show()

# Example 4.8
# Program to draw Pie Chart 
# Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
#%matplotlib inline
# Specify Data
labels = ["Raw Materials","Labour","Rent","Electricity"]
values = [30,90,30,30]
palette_color = sns.color_palette('bright')
explode = [0, 0.1, 0, 0]
colors = ['b','g','r','c']
# Draw a Pie Chart
#plt.pie(values, labels = labels, colors = colors, explode = explode, autopct='%1.1f%%', shadow = True)
plt.pie(values, labels=labels, colors=palette_color, autopct='%.0f%%')
plt.show()

# Example 4.9
# Category Plot using Seaborn
# Import Libraries
import matplotlib.pyplot as plt
#%matplotlib inline
import seaborn as sns
# Specify Data
mpg_df = sns.load_dataset("mpg")
# Create Category Plot
#sns.catplot(x = 'origin' , y = 'weight' , kind = 'violin' , data = mpg_df)
#sns.catplot(x = 'origin' , y = 'weight' , kind = 'bar' , data = mpg_df)
sns.catplot(x = 'origin' , y = 'weight' , kind = 'box' , data = mpg_df, color = 'r')



# Example 4.10
# Scatter Plot using Seaborn
# Import Libraries
#%matplotlib inline
import seaborn as sns
# Specify Data
mpg_df = sns.load_dataset("mpg")
# Create Scatter Plot
sns.scatterplot(x = 'weight' , y = 'mpg' , data = mpg_df, color = 'g')

# Example 4.11
# Hexagonal Binning Plot
# Hexagonal Binning Plot ia a fancier version of Scatter Plot
# Import Libraries
#%matplotlib inline
import seaborn as sns
# Specify Data
mpg_df = sns.load_dataset("mpg")
# set the plot style to include ticks on the axes.
sns.set(style="ticks")
# Hexbin plot
sns.jointplot(x = "weight", y= "mpg", data = mpg_df, kind="hex", color="#4CB391")

# Example 4.12
# Swarm Plot using Seaborn
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams["figure.figsize"] = [8,6]
sns.set_style("darkgrid")
titanic_data = sns.load_dataset('titanic')
sns.swarmplot(x='alone', y='age', hue='sex',data=titanic_data)

# Example 4.13
# Bar Plot - Diamonds Dataset
# Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
# Specify Data
diamonds_df = sns.load_dataset('diamonds')
# Draw Bar Chart
sns.barplot(x = "cut", y = "price" , hue = 'color', data=diamonds_df)

# Example 4.14
# Bar Plot with Legend - Diamonds Dataset
# Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
# Specify Data
diamonds_df = sns.load_dataset('diamonds')
# Draw Bar Chart
ax = sns.barplot(x = "cut", y = "price" , hue = 'color', data=diamonds_df)
# Define Legend
ax.legend(loc = 'upper right' , ncol = 4)

# Example 4.15
# Bar Plot with labels in bigger Font Size - Diamonds Dataset
# Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
# Specify Data
diamonds_df = sns.load_dataset('diamonds')
# Draw Bar Chart
ax = sns.barplot(x = "cut", y = "price" , hue = 'color', data=diamonds_df)
# Define Legend
ax.legend(loc = 'upper right' , ncol = 4)
# Define Font Size
ax.set_xlabel('cut' , fontdict = {'fontsize' : 15})
ax.set_ylabel('price' , fontdict = {'fontsize' : 15})

# Example 4.16
# Bar Plot with Rotating Labels - Diamonds Dataset
# Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
# Specify Data
diamonds_df = sns.load_dataset('diamonds')
# Draw Bar Chart
ax = sns.barplot(x = "cut", y = "price" , hue = 'color', data=diamonds_df)
# Define Legend
ax.legend(loc = 'upper right' , ncol = 4)
# Define x-ticks
ax.set_xticklabels(ax.get_xticklabels(), fontsize = 13, rotation = 30)

# Example 5.1
# Creating a List from User Input
item_list = []
no_of_items = eval(input("Type total number of items in List:"))
for i in range(0,no_of_items):
  item = input("Type an item to add: ")
  item_list.append(item)
print(f"Items in the List are {item_list}")

# Example 5.2
# Traversing a List
games = ["Cricket", "Football", "Hockey", "basket Ball"]
for each_game in games:
  print(f"I wish to play {each_game}")

# Example 5.3
# Program to display the Index values of items in a List
software_companies = ["Infosys","TCS","Wipro","Cognizant"]
for i in range(0,len(software_companies)):
  print(f"The index value of '{software_companies[i]}' is {i}")

# Example 5.4
# Linear Search
# Program to find position of occurence of a value in a list
values = list(eval(input("Type a list of values: ")))
search_value = int(input("Type the value whose index position is needed: "))
for i in range(0,len(values)):
  if values[i] == search_value:
    print(f"{search_value} occurs at the position {i}")
    break
else:
  print(f"{search_value} does not occur in the given List")

# Example 5.5
# Sorting
# Program to sort a set of values in ascending order
values = list(eval(input("Type a list of values: ")))
for i in range(0,len(values)-1):
  for j in range(i+1, len(values)):
    if values[j] < values[i]:
      temp = values[i]
      values[i] = values[j]
      values[j] = temp

for k in range(0,len(values)):
  print(f"{values[k]}")

# Example 5.6
# Program to calculate Mean and SD
import math
data = list(eval(input('Type the 5 values: ')))
print (data)
# Mean of data
mean = sum(data)/len(data)
print(f"Mean = {mean}")
# Sum of Squares of Deviations
sum_of_squares = 0
for i in range(0,len(data)):
  sum_of_squares = sum_of_squares + (data[i] - mean) ** 2
# Variance
var = sum_of_squares/len(data)
print(f"Variance = {var}")
std_deviation =  math.sqrt(var)
print(f"Std. Deviation = {std_deviation:8.2f}")

# Example 5.7
# Program to carry out Stack Operations
stack = []
stack_size = 4
def push(item):
  if len(stack) < stack_size:
    stack.append(item)
    print(f"Item added: {item}")
  else:
    print("stack is full")
def pop():
  if len(stack) > 0:
    print(f"item removed: {stack.pop()}")
  else:
    print("stack is empty")
def display():
  print("Items in Stack are:")
  for item in stack:
    print(item)
# Main Code
push(11)
push(12)
push(13)
push(14)
pop()
pop()
display()

# Example 5.8
# Program to carry out Queue Operations
import collections
queue = collections.deque(["Andrew","Thomas","Albert","Louie"])
print(f"Initial Items are {queue}")
queue.append("Benny")
queue.append("Gerald")
print(f"Items after addition are {queue}")
print(f"Removed item from Queue is {queue.popleft()}")
print(f"Removed item from Queue is {queue.popleft()}")
print(f"Items after removal are {queue}")

# Example 5.9
# Program to calculate Mean and SD using List Comprehension
import math
data = list(eval(input('Type the 5 values: ')))
print (data)
# Mean of data
mean = sum(data)/len(data)
print(f"Mean = {mean}")
# Square Deviations - List Comprehension
deviations = [(x - mean) ** 2 for x in data]
# Variance
var = sum(deviations)/len(data)
print(f"Variance = {var}")
std_deviation =  math.sqrt(var)
print(f"Std. Deviation = {std_deviation:8.2f}")

# Example 5.10
# Program to find common elements of two Lists using List Comprehension
x = [11,11,12,13,15,18,23,31,44,65,99]
y = [11,12,13,14,15,16,17,18,19,20,21,22,23]
result = [x[i] for i in range(len(x)) if x[i] in y and x[i] not in x[:i]]
print(result)

# Example 6.1
# Creating a Dictionary from user Input
phone_dictionary = {}
for i in range(0,3):
  dictionary_key = input("Type key: ")
  dictionary_value = input("Type value: ")
  phone_dictionary.update({dictionary_key:dictionary_value})
print(f"Dictionary is {phone_dictionary}")

# Example 6.2
# Traversing a Dictionary
capital_dictionary = {"India":"Delhi","Srilanka":"Colombu","Nepal":"Katmandu"}
for country,capital in capital_dictionary.items():
  print(f"'{country}' has the capital '{capital}'")
# Displaying keys in the Dictionary
for country in capital_dictionary.keys():
  print(country)
# Displaying values in the Dictionary
for capital in capital_dictionary.values():
  print(capital)

# Example 6.3
# Finding the no. of times an item occurs in a List
movies = ["Sound of Music","Sound of Music","Mckennas Gold","Sound of Music", "Great Escape","Great Escape"]
count_items = dict()
for movie_name in movies:
  count_items[movie_name]=count_items.get(movie_name,0)+1
print(f"No. of times each movie name occurs in the List is:{count_items}")

# Example 6.4
# Finding no. of times each word appears in a sentence
count_words = dict()
sentence = input("Type a Sentence:")
words = sentence.split()
for each_word in words:
  count_words[each_word]=count_words.get(each_word,0)+1
print(count_words)

# Example 6.5
# Calculating no. of digits, uppercase & lowercase letters in a string
sentence = input("Type a Sentence: ")
count_dictionary={"digit":0,"lowercase":0,"uppercase":0}
for each_character in sentence:
  if each_character.isdigit():
    count_dictionary["digit"]=count_dictionary["digit"]+1
  elif each_character.isupper():
    count_dictionary["uppercase"]=count_dictionary["uppercase"]+1
  elif each_character.islower():
    count_dictionary["lowercase"]=count_dictionary["lowercase"]+1
print(count_dictionary)

# Example 6.6
# Storing Reg No & Mark for each Student in a Dictionary
student_details ={}
for i in range(0,5):
  name = input("Type Student Name: ")
  register_number = input("Type Register Number: ")
  mark = input("Type Mark: ")
  student_details[name]=[register_number,mark]
student_name = input("Type Student Name whose details are needed: ")
if student_name not in student_details.keys():
  print(f"{student_name} is not present in the List")
else:
  print(f"Register Number is: {student_details[student_name][0]}")
  print(f"Mark is: {student_details[student_name][1]}")

# Example 6.7
# Storing Month Numbers & Month Names in a Dictionary
# Function Definition
def prettyDate(date):
  months = {1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}
  month = months[int(date[0:2])]
  day = date[2:4]
  year = date[4:8]
  formatted_date = month + " " + day + "," + year
  print (formatted_date)
# Main Code
date = input("Type Date in MMDDYYYY format: ")
prettyDate(date)

# Example 7.1
# Creating a Tuple(Remember: Tuple is immutable)
register_numbers = ("24PDS001","24PDS002","24PDS003","24PDS004","24PDS005")
#register_numbers = "24PDS001","24PDS002","24PDS003","24PDS004","24PDS005"
#list1 = ["24PDS001","24PDS002","24PDS003","24PDS004","24PDS005"]
#register_numbers = tuple(list1)
# Traversing a Tuple
for each_register_number in register_numbers:
  print(each_register_number)
#register_numbers[0]= "23PDS006" # error will be reported

# Example 7.2
# Creating a Tuple with user-entered data
tuple1 = ()
no_of_items = int(input("Type the total number of items in Tuple: "))
for i in range(0,no_of_items):
  item = input("Type an item to add in Tuple: ")
  tuple1 = tuple1 + (item,)
print(f"Items in the Tuple are {tuple1}")

# Example 7.3
# Swapping two values without using an intermediate variable
a = eval(input("Type the First Number: "))
b = eval(input("Type the Second Number: "))
b , a = a , b  # a , b is a Tuple . Unpacking is done here.
print(f"First Number after Swapping is : {a}")
print(f"Second Number after Swapping is : {b}")

# Exercise 7.4
# Function to find factorial of a number
def factorial(n):
  value = 1
  for i in range(1 , n+1):
    value = value * i
  return value
# Function to find n c r and n p r values
def ncrnpr(n,r):
  ncr_value = factorial(n)/(factorial(r)*factorial(n-r))
  npr_value = factorial(n)/factorial(n-r)
  return ncr_value, npr_value
# Code to find n c r and n p r using the above function
n = eval(input("Type the value of N: "))
r = eval(input("Type the value of R: "))
ncr_value, npr_value = ncrnpr(n,r)
print(f"Value of {n} c {r} = {ncr_value} ")
print(f"Value of {n} p {r} = {npr_value} ")

# Example 7.5
# Creating a Set from User Input
flower_set = set()
for i in range(0,3):
  flower = input("Type the name of first flower: ")
  flower_set.add(flower)

print(flower_set)

# Example 7.6
# Program to traverse a Set
southern_states = {"TamilNadu","Kerala","Karnataka","Andhra","Telangana"}
for each_state in southern_states:
  print(f"{each_state} is a Southern State in India")

# Example 7.7
# Program for membership Testing
southern_states = {"TamilNadu","Kerala","Karnataka","Andhra","Telangana"}
state = input("Type the name of the State: ")
if state in southern_states:
  print(f"{state} is a Southern State")
else:
  print(f"{state} is not a Southern State")

# Example 7.8
# Program to demonstrate automatic elimination of duplicate entries
southern_states = {"TamilNadu","Kerala","Karnataka","Andhra","Kerala","Telangana"}
print(f"Southern States are: {southern_states}")

# Example 7.9
# set() method will extract the unique characters in a word/string
word = "Congratulations"
charater_set = list(set(word))
print(f"Unique Characters in the Word '{word}' are: {charater_set}")

# Example 7.10
# Finding unique characters in each one of the given collection of words
def find_unique_characters(*words):
  for each_word in words:
    character_set = sorted(list(set(each_word)))
    print(f"Unique Characters in the word {each_word} are: {character_set}")
# Main Code
find_unique_characters("good","better","best")

# Example 7.11
# Finding Unique Words in a Sentence.Duplicate words will be removed.
sentence = "The wise girl solved the puzzle quickly"
sentence = sentence.lower()
words = sentence.split()
print(f"Unique Words are: {list(set(words))}")
print(f"Unique Sorted Words are: {sorted(list(set(words)))}")

# Example 8.1
# Program to read and display the contents of a File
file_object_1 = open("datascience.txt","r")
for each_line in file_object_1:
  print(each_line)
file_object_1.close()

# Example 8.2
# Program to read and print each Line in a File using "with" st
with open("datascience.txt","r") as file_object_2:
  for each_line in file_object_2:
    print(each_line)

# Example 8.3
# Program to read from a File using read() method
with open("datascience.txt","r") as file_object_3:
  #file_content = file_object_3.read()   # Command to read entire content
  file_content = file_object_3.read(50)
  print(file_content)

# Example 8.4
# Program to read from a File using readline() method
# readline() method is used to read a single line at a time from a File
with open("datascience.txt","r") as file_object_4:
  print(file_object_4.readline())
  print(file_object_4.readline())
  print(file_object_4.readline())

# Example 8.5
# Program to reverse each word in a Text File
reversed_word_list = []
with open("file7.txt","r") as file_object_5:
  for each_line in file_object_5:
    #each_line = each_line.rstrip() # Removes trailing spaces
    word_list = each_line.split() # splits a line into words
    for each_word in word_list:
      reversed_word_list.append(each_word[::-1]) # Reverse a Word
      reversed_word_list.append(" ")
    reversed_word_list.append("\n")
  print("".join(reversed_word_list))

# Example 8.6
# Program to find word frequencies
word_frequencies = dict()
with open("file8.txt","r") as file_object_6:
  for each_line in file_object_6:
    #each_line = each_line.rstrip() # Removes trailing spaces
    word_list = each_line.split() # splits a line into words
    for each_word in word_list:
      word_frequencies[each_word]=word_frequencies.get(each_word,0)+1
  print("The number of times each word appears is:")
  print(word_frequencies)

# Example 8.7
# Program to find the longest word in a Text File
with open("file8.txt","r") as file_object_7:
  longest_word = ""
  for each_line in file_object_7:
    each_line = each_line.rstrip() # Removes trailing spaces
    word_list = each_line.split() # splits a line into words
    for each_word in word_list:
      if len(each_word)>len(longest_word):
        longest_word = each_word
  print(f"Longest Word in the File is: {longest_word}")

# Example 8.8
# Program to read an image from a binary file & write it into another binary file
# A File which is opened in binary mode
# will return its contents as bytes without any decoding
with open("dog.jpg","rb") as file_object_8,open("new_dog.jpg","wb")as file_object_8A:
  for each_line_bytes in file_object_8:
    file_object_8A.write(each_line_bytes)

# Example 8.9
# Program to write a string in a binary file & then read it
with open("newfile","wb") as file_object_9:
  file_object_9.write(b'abcdef')
with open("newfile","rb") as file_object_9:
  byte = file_object_9.read(1)
  print("Print each byte in the File")
  while byte:
    print(byte)
    byte = file_object_9.read(1)# Example 8.9
# Program to write a string in a binary file & then read it
with open("newfile","wb") as file_object_9:
  file_object_9.write(b'abcdef')
with open("newfile","rb") as file_object_9:
  byte = file_object_9.read(1)
  print("Print each byte in the File")
  while byte:
    print(byte)
    byte = file_object_9.read(1)

# Example 8.10
# Program to read records from a CSV File 7 display one's details
import csv
with open("biodata.csv",'r',newline='') as file_object_10B:
  csv_reader = csv.reader (file_object_10B)
  name = input("Type name of Person whose details are needed:")
  print(f"Display {name}'s Details")
  for each_record in csv_reader:
    if each_record[0] == name:
      print(",".join(each_record))

#Example 8.11
#Program to write given data to a CSV file
import csv
header_record = ['state','capital']
content_records = [['TamilNadu','Chennai'],['Karnataka','Bengaluru'],['Maharashtra','Mumbai'],['West Bengal','Kolkatha']]
with open('state_capitals.csv','w',newline='') as file_object_11:
  csv_writer = csv.writer(file_object_11)
  csv_writer.writerow(header_record)
  csv_writer.writerows(content_records)

#Example 8.12
#Program to read data from state_details.csv & form a Dictionary
import csv
with open('state_capitals.csv','r', newline='') as file_object_12:
  csv_reader = csv.reader (file_object_12)
  next(csv_reader, None)  # skip the header
  print("Display each Record(Row) in CSV File")
  for each_record in csv_reader:
    print(",".join(each_record))

#Example 8.13
#Program to write data to a CSV file using DictWriter class
import csv
with open('pincodes.csv','w', newline='') as file_object_13:
  column_names = ['capital','pincode']
  writer = csv.DictWriter(file_object_13, fieldnames = column_names)
  writer.writeheader()
  writer.writerow({'capital':'Chennai','pincode':'600001'})
  writer.writerow({'capital':'Bengaluru','pincode':'500001'})
  writer.writerow({'capital':'Mumbai','pincode':'400001'})
  writer.writerow({'capital':'Kolkatha','pincode':'800001'})

#Example 8.14
#Program to read data from a CSV file using DictReader class
import csv
with open('pincodes.csv','r', newline='') as file_object_14:
  reader = csv.DictReader(file_object_14)
  for each_record in reader:
    print(f"{each_record['capital']},{each_record['pincode']}")

# Example 9.1
# Defining a class named "Rectangle"
class Rectangle:
      def __init__ (self, length, breadth):
        self.length = length
        self.breadth = breadth
      def calculate_area (self) :
        area = self.length * self.breadth
        return area
      def calculate_perimeter (self) :
        perimeter = 2 *(self.length + self.breadth)
        return perimeter
# Main Code
length = int(input("Type Length of Wall: "))
breadth = int(input("Type Bredth of Wall: "))
wall = Rectangle (length, breadth)
wall_area = wall.calculate_area( )
wall_perimeter = wall.calculate_perimeter( )
print(f"Area of Wall = {wall_area} square feet")
print(f"Perimeter of Wall = {wall_perimeter} feet")

# Example 9.2
# Defining a class named "Room"
class Room:
      def __init__ (self, length, breadth,height):
        self.length = length
        self.breadth = breadth
        self.height = height

      def white_washing_area(self):
        wall_area = 2*(self.length*self.height)+2*(self.breadth*self.height)
        ceiling_area = self.length*self.breadth
        total_area = wall_area + ceiling_area
        return total_area

      def white_washing_cost(self):
        cost = self.white_washing_area() * 25
        return cost

# Main Code
length = int(input("Type Length of Class Room: "))
breadth = int(input("Type Bredth of Class Room: "))
height = int(input("Type Height of Class Room: "))
classRoom = Room (length, breadth,height)
whitwashing_cost = classRoom.white_washing_cost()
print(f"Whitewashing Cost = Rs. {whitwashing_cost} ")

# Example 9.3
# Defining a class named "SavingsAccount"
class SavingsAccount:
  def __init__(self,name):
    self.name = name
    self.balance = 0.0
  def credit_money(self,amount):
    self.balance = self.balance + amount
    print(f"{self.name} deposited Rs. {amount}")
  def debit_money(self,amount):
    if amount > self.balance:
      print(f"Type an amount less than Rs. {self.balance}")
    else:
      self.balance = self.balance - amount
      print(f"{self.name} withdrew Rs. {amount}")
  def display_balance(self):
    print(f"{self.name} has a balance of Rs. {self.balance}")
# Object Creation
savings_account = SavingsAccount("Roshita")
savings_account.credit_money(10000)
savings_account.debit_money(6000)
savings_account.display_balance()

# Example 9.4
# Defining Abstraction - implementation Hiding
class Quadrant:
  def __init__(self,x,y):
    self.x_coordinate = x
    self.y_coordinate = y
  def find_quadrant(self):
    if self.x_coordinate > 0 and self.y_coordinate > 0 :
      print(f"Point({self.x_coordinate} , {self.y_coordinate}) lies in First Quadrant")
    elif self.x_coordinate < 0 and self.y_coordinate < 0 :
      print(f"Point({self.x_coordinate} , {self.y_coordinate}) lies in Third Quadrant")
    elif self.x_coordinate > 0 and self.y_coordinate < 0 :
      print(f"Point({self.x_coordinate} , {self.y_coordinate}) lies in Fourth Quadrant")
    elif self.x_coordinate < 0 and self.y_coordinate > 0 :
      print(f"Point({self.x_coordinate} , {self.y_coordinate}) lies in Second Quadrant")
# Object Creation
point = Quadrant(40,20)
point.find_quadrant()

# Example 9.5
# Defining a class named "Person"
class Person:
      def __init__ (self, name, age):
        self.name = name
        self.age = age
      def getName (self):
        return self.name
      def getAge (self):
        return self.age
# Defining a derived class named "Student"
class Student (Person):
      def __init__(self, name,age,rollNumber,mark):
        super (Student, self). __init__ (name, age)
        self.rollNumber = rollNumber
        self.mark = mark
      def getRollNumber(self):
        return self.rollNumber
      def getMark (self):
        return self.mark
# Main Code
student = Student("Mahesh", 20, "24PDS002", 83)
print(student.getName( ))
print(student.getAge( ))
print(student.getRollNumber( ))
print(student.getMark( ))

# Example 9.6
# Defining a class named "Employee"

class Employee:
      def __init__ (self, name, id):
        self.name = name
        self.id = id
      def getName (self):
        return self.name
      def getId (self):
        return self.id

# Defining a class named "FacultyMember"
class FacultyMember (Employee):
      def __init__(self, name,id,department,designation):
        super (FacultyMember, self). __init__ (name, id)
        self.department = department
        self.designation = designation
      def getDepartment(self):
        return self.department
      def getDesignation (self):
        return self.designation

# Main Code
facultyMember = FacultyMember ("JesuRaj", "DSC002","DataScience" , "Professor")
print(facultyMember.getName())
print(facultyMember.getId())
print(facultyMember.getDepartment())
print(facultyMember.getDesignation())

# Example 9.7
# Method Overriding
# Defining a class named "Person"
class Person:
      def __init__ (self, name, age):
        self.name = name
        self.age = age

      def get_details(self):
        return self.name, self.age
# Defining a derived class named "Student"
class Student (Person):
      def __init__(self, name,age,rollNumber,mark):
        super (Student, self). __init__ (name, age)
        self.rollNumber = rollNumber
        self.mark = mark

      def get_details(self):
        return self.rollNumber, self.mark
# Main Code
student = Student("Jesudoss", 20 , "24PDS001" , 92)

rollNumber , mark = student.get_details()
print(f"Roll Number  is: {rollNumber}")
print(f"Student Mark is: {mark}")

# Example 10.1
# Displaying Diagonal Elements of a Matrix
import numpy as np
m = eval(input("Type number of rows:"))
n = eval(input("Type number of columns:"))
matrix_A = np.zeros((m, n))
for i in range(0,m):
  for j in range(0,n):
    matrix_A[i][j] = eval(input("Type an element:"))
for i in range(0,m):
  for j in range(0,n):
    if i == j:
      print(f"Diagonal Element ({i},{j})is: {matrix_A[i][j]}")

# Example 10.2
# Matrix Addition
import numpy as np
m = eval(input("Type number of rows: "))
n = eval(input("Type number of columns: "))

matrix_A = np.zeros((m, n))
for i in range(0,m):
  for j in range(0,n):
    matrix_A[i][j] = eval(input("Type an element of Matrix A:"))

matrix_B = np.zeros((m, n))
for i in range(0,m):
  for j in range(0,n):
    matrix_B[i][j] = eval(input("Type an element of Matrix B:"))

matrix_C = np.zeros((m, n))

matrix_C = np.add(matrix_A,matrix_B)

for i in range(0,m):
  for j in range(0,n):
    print(f"Element at ({i},{j})position of Matrix C is: {matrix_C[i][j]}")

# Example 10.3
# Matrix Multiplication - Specific Case
import numpy as np
# Take a 3x3 matrix
A = [[12, 7, 3],
    [4, 5, 6],
    [7, 8, 9]]

# Take a 3x4 matrix
B = [[5, 8, 1, 2],
    [6, 7, 3, 0],
    [4, 5, 9, 1]]

# Result will be 3x4 matrix

C = np.zeros((3,4))

C = np.dot(A,B)

for row in C:
    print(row)

# Example 10.4
# Matrix Multiplication - General
import numpy as np
m = eval(input("Type number of rows in Matrix A:"))
p = eval(input("Type number of columns in Matrix A:"))
matrix_A = np.zeros((m, p))
for i in range(0,m):
  for j in range(0,p):
    matrix_A[i][j] = eval(input("Type an element of Matrix A:"))
p = eval(input("Type number of rows in Matrix B:"))
n = eval(input("Type number of columns in Matrix B:"))
matrix_B = np.zeros((p, n))
for i in range(0,p):
  for j in range(0,n):
    matrix_B[i][j] = eval(input("Type an element of Matrix B:"))
matrix_C = np.zeros((m, n))

matrix_C = np.dot(matrix_A,matrix_B)

for i in range(0,m):
  for j in range(0,n):
    print(f"Element at ({i},{j})of Matrix C is: {matrix_C[i][j]}")

# Example 10.5
# Broadcasting Example - 1
array_1 = np.ones([3,4])
array_2 = np.arange(4)
array_3 = array_1 + array_2
array_3

# Example 10.6
# Broadcasting Example - 2
array_1 = np.array([[1],[2],[3],[4]])
array_2 = np.arange(4)
array_3 = array_1 + array_2
array_3

# Example 10.7
# Series Creation
import pandas as pd
series_1 = pd.Series(np.array([0,1,2,3,4]), index = ['a','b','c','d','e'])
series_1.index
series_1.values
series_1

# Example 10.8
# Series Creation from Dictionary
import numpy as np
import pandas as pd
d = {'a':10, 'b':20, 'c':30}
series_1 = pd.Series(d)
series_1

# Example 11.1
# describe() example
import seaborn as sns
flights_df = sns. load_dataset ('flights')
flights_df.head()

flights_df.passengers.describe()


# Example 11.1
# describe() example
import seaborn as sns
flights_df = sns. load_dataset ('flights')
flights_df.head()

flights_df.passengers.describe()


# Example 11.3
# value_counts() example 2
import seaborn as sns
diamonds_df = sns. load_dataset ('diamonds')
diamonds_df.head()

diamonds_df.color.value_counts()

diamonds_df.color.value_counts(normalize = True)

diamonds_df.color.value_counts(normalize = True).reset_index()

diamonds_df.clarity.value_counts()

diamonds_df.cut.value_counts()

# Example 11.4
# Bar Chart
import pandas as pd
new_students_info = {"Name":['Thomas','Andrew','Daniel','Benny','Milton','Giftson' ],
                     "Year":[1,1,2,2,3,3],
                 "State":['TN','TN','KL', 'KL','AP','TN'],
                     "Age" : [19,18,20,19,20,21],
                     "DA_mark" : [80,92,70,85,83,84],
                     "DV_mark" : [82,95,74,85,86,88]
                     }
new_students_df = pd.DataFrame(new_students_info)
new_students_df

import matplotlib.pyplot as plt
new_students_df.DA_mark.plot(kind = 'bar')

new_students_df.index = new_students_df.Name
new_students_df.DA_mark.plot(kind = 'bar')
new_students_df = new_students_df.reset_index(drop = True)

new_students_df.plot(x = 'Name', y = 'DA_mark', kind = 'bar')


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()



orders_df.number_of_orders.describe()

orders_df.number_of_orders.plot(kind = 'box')


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()



orders_df['date_time'] = pd.to_datetime(orders_df['date_time'])
orders_df.date_time.dt.weekday.value_counts().sort_index().plot(kind = 'bar')

orders_df.date_time.dt.weekofyear.value_counts().sort_index().plot(kind = 'bar')

orders_df.date_time.dt.weekofyear.value_counts().sort_index().plot(kind = 'line')

orders_df.number_of_orders.plot(kind = 'hist' , bins = 30)

(orders_df[orders_df.date_time.dt.weekday < 5]
 .number_of_orders
 .plot(kind = 'hist' , bins = 30))

(orders_df[orders_df.date_time.dt.weekday >= 5]
 .number_of_orders
 .plot(kind = 'hist' , bins = 30))

orders_df['date_time'] = pd.to_datetime(orders_df['date_time'])
(orders_df[orders_df.date_time.dt.weekday < 5]
 .number_of_orders
 .plot(kind = 'hist' , bins = 30, density = True))
(orders_df[orders_df.date_time.dt.weekday >= 5]
 .number_of_orders
 .plot(kind = 'hist' , bins = 30, density = True, alpha = 0.5))
plt.legend(["Weekdays" , "Weekends"])

for restaurant in orders_df.Restaurant_Location.unique().tolist():
  print(restaurant)
  df = orders_df[orders_df.Restaurant_Location == restaurant]
  # Plot weekday histogram
  (df[df.date_time.dt.weekday < 5].number_of_orders.plot(kind = 'hist' , bins = 30 , density = True))
  # Plot weekend histogram
  weekend_rows = ( df.date_time.dt.weekday >= 5)
  if weekend_rows.sum() > 0 :
    (df[weekend_rows].number_of_orders.plot(kind = 'hist' , bins = 30 , density = True , alpha = 0.5))
  # Add a legend
  plt.legend(['Weekday' , 'Weekend'])
  # Show the plot at each iteration of the "for" loop
  plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()

(orders_df.Restaurant_Location == 'Vashi').head()

def is_Vashi(Restaurant_Location):
  return Restaurant_Location == 'Vashi'

orders_df.Restaurant_Location.apply(is_Vashi).head()

import time

start_time = time.time()

# Your code here
orders_df.Restaurant_Location.apply(is_Vashi).head()

end_time = time.time()
elapsed_time = end_time - start_time
print(f"Time taken: {elapsed_time} seconds")

import time

start_time = time.time()

# Your code here
(orders_df.Restaurant_Location == 'Vashi').head()

end_time = time.time()
elapsed_time = end_time - start_time
print(f"Time taken: {elapsed_time} seconds")

# Example 12.1
# groupby() example
#import numpy as np
#import pandas as pd
import seaborn as sns
flights_df = sns. load_dataset ('flights')
flights_df.head()

flights_df.groupby('year').passengers.sum()

flights_df.groupby('month').passengers.sum()

flights_df.groupby('year').passengers.sum().pct_change() * 100


# Example 12.2
# Bar Chart - Example 1
#import numpy as np
#import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
flights_df = sns. load_dataset ('flights')
flights_df.head()

yearwise_passenger_count_df = flights_df.groupby('year').passengers.sum().reset_index()
sns.barplot(data = yearwise_passenger_count_df, x = 'year', y = 'passengers')
plt.xlabel('Year')
plt.ylabel('Passengers')
plt.title('Passengers per Year')
plt.show()

# Example 12.3
# Bar Chart - Example 2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
flights_df = sns. load_dataset ('flights')
flights_df.head()

monthwise_passenger_count_df = flights_df.groupby('month').passengers.sum().reset_index()
sns.barplot(data = monthwise_passenger_count_df, x = 'month', y = 'passengers')
plt.xlabel('Month')
plt.ylabel('Passengers')
plt.title('Passengers per Month')
plt.show()

# Example 12.4
# Bar Chart - Example 3
# Summarized_Orders dataset from Mattan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()

orders_df.groupby('Restaurant_Location').number_of_orders.mean()

orders_df.groupby('Restaurant_Location').number_of_orders.mean().reset_index()

orders_df.groupby('Restaurant_Location').number_of_orders.mean().plot(kind = 'bar')

# Example 12.5

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()

# size() function

orders_df.groupby('Restaurant_Location').size()

# Example 12.6
# groupby.aggregate() function
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
tips_df = sns. load_dataset ('tips')
tips_df.head()

tips_df.groupby('day').sum()

tips_df.groupby('time').sum()

tips_df.groupby('day').total_bill.mean()

# Example 12.7

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

orders_df = pd.read_csv("Summarized_Orders2.csv")
orders_df.head()

# groupby.agg() function

orders_df_results = (orders_df.groupby('Restaurant_Location').
              agg(ORDERS_MEAN = ('number_of_orders', 'mean'),
                  DELIVERY_PERCENTAGE_MEDIAN = ('percentage_of_delivery_orders', 'median')))

orders_df_results.head()

# Example 13.1
# concat() function Demo
import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

concatenated_df = pd.concat([left_df,right_df])

concatenated_df .head(10)

# Example 13.2
# append() function Demo

import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

appended_df = left_df.append(right_df)

appended_df.head(10)


# Example 13.3

import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

# "inner merge" & "outermerge" Demo
inner_merged_df = pd.merge(left_df, right_df, left_on = 'Founder', right_on = 'Founder', how = 'inner')
inner_merged_df.head(10)

inner_merged_df = pd.merge(left_df, right_df, left_on = 'Founder', right_on = 'Founder')
inner_merged_df.head(10)

inner_merged_df = pd.merge(left_df, right_df, on = 'Founder', how = 'inner')
inner_merged_df.head(10)

# Example 13.4

import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

# "left merge" Demo

left_merged_df = pd.merge(left_df, right_df, left_on = 'Founder', right_on = 'Founder', how = 'left')

left_merged_df.head()

# Example 13.5

import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

# "right merge" Demo

right_merged_df = pd.merge(left_df, right_df, left_on = 'Founder', right_on = 'Founder', how = 'right')

right_merged_df.head()

# Example 13.6

import numpy as np
import pandas as pd

left_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['OpenAI','Karya','NVidea','Curai','Encode'],
                 "Founder":['Sam','Manu','Jesan', 'Neal','Sneha']

                     })
left_df.head()

right_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "Company":['Shalom','WadhwaniAI','Astrix','Refiberd','Nallas'],
                 "Founder":['Kalika','Sam','Jesan', 'Tushmita','Senthil']

                     })
right_df.head()

# "outer merge" Demo

outer_merged_df = pd.merge(left_df, right_df, left_on = 'Founder', right_on = 'Founder', how = 'outer')

outer_merged_df.head(10)

# Example 13.7
import numpy as np

import pandas as pd
first_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Madras','Madurai','Bharathiar','Bharathidasan','Thiruvalluvar'],
                 "Professor":['Andrew','Albert','Thomas', 'Giftson','Milton']

                     })
first_df.head()

import numpy as np

import pandas as pd
second_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Cochin','Trivandrum','Calicut','Trichur','Kottayam'],
                 "Professor":['Andrew','Charles','Benedict', 'Thomas','Louie']

                     })
second_df.head()

inner_merged_table = pd.merge(first_df, second_df, left_on = 'Professor',
                              right_on = 'Professor', how = 'inner')
inner_merged_table.head()
outer_merged_table = pd.merge(first_df, second_df, left_on = 'Professor', right_on = 'Professor', how = 'outer')
outer_merged_table.head(8)


# Example 13.8
import numpy as np

import pandas as pd
first_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Madras','Madurai','Bharathiar','Bharathidasan','Thiruvalluvar'],
                 "Professor":['Andrew','Albert','Thomas', 'Giftson','Milton']

                     })
first_df.head()

import numpy as np

import pandas as pd
second_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Cochin','Trivandrum','Calicut','Trichur','Kottayam'],
                 "Professor":['Andrew','Charles','Benedict', 'Thomas','Louie']

                     })
second_df.head()

left_merged_table = pd.merge(first_df, second_df, left_on = 'Professor', right_on = 'Professor', how = 'left')

left_merged_table.head()


# Example 13.9
import numpy as np

import pandas as pd
first_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Madras','Madurai','Bharathiar','Bharathidasan','Thiruvalluvar'],
                 "Professor":['Andrew','Albert','Thomas', 'Giftson','Milton']

                     })
first_df.head()

import numpy as np

import pandas as pd
second_df = pd.DataFrame({"Ranking":[1,2,3,4,5 ],
                     "University":['Cochin','Trivandrum','Calicut','Trichur','Kottayam'],
                 "Professor":['Andrew','Charles','Benedict', 'Thomas','Louie']

                     })
second_df.head()

right_merged_table = pd.merge(first_df, second_df, left_on = 'Professor', right_on = 'Professor', how = 'right')
right_merged_table.head()

# Example 13.10

import numpy as np
import pandas as pd

weather_df = pd.read_csv("weather1.csv")
weather_df.DATETIME = pd.to_datetime(weather_df.DATETIME)
weather_df.head()

num_orders_df = pd.read_csv("num_orders1.csv")
num_orders_df.DATETIME = pd.to_datetime(num_orders_df.DATETIME)
num_orders_df.head(5)

merged_df1 = pd.merge(num_orders_df , weather_df , on = 'DATETIME' , how = 'left')
merged_df1.head(15)

merged_df1.plot( x = 'TEMPERATURE' , y = 'NUM_ORDERS' , kind = 'scatter')

((merged_df1.TEMPERATURE/10).round() * 10).head()

merged_df1.groupby((merged_df1.TEMPERATURE/10).round() * 10).NUM_ORDERS.sum().plot(kind = 'bar')

# Example 15.1 - Version 2 ( ML Approach)
# Simple Linear Regression - Example 1
# Import the Libraries
import numpy as np
import matplotlib.pyplot as plt

# Specify Data
X = [1,2,3,4,5,6,7,8,9,10]
Y = [3,5,7,9,11,13,15,17,19,21]
X = np.array(X)
X = X.reshape(-1,1)

# Fit Linear Regression Model
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X,Y)
regression_coefficient = lr.coef_[0]
intercept = lr.intercept_

# Display Output
print(f"Regression Coefficient =  {regression_coefficient:5.2f} ")
print(f"Intercept is: { intercept : 5.2f}" )
print()
print(f"Regression Equation is: Y = {regression_coefficient:5.2f} X + { intercept : 5.2f}")
print()

# Do Prediction
predicted_value = lr.predict([[11]])[0]
print(f"Predicted Value is: { predicted_value: 5.2f}")
print()

# Visualize the Regression Line
plt.scatter(X,Y,color = 'red')
plt.plot(X,lr.predict(X), color = 'blue')
plt.show()

# Example 15.2
# Simple Linear Regression - Example 2
# Import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Read data from a CSV file
df = pd.read_csv('Salary_Data1.csv')
X = df["Experience"].values
Y = df["Salary"].values
X = X.reshape(-1, 1)

# Fit Simple Linear Regression Model
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X, Y)
regression_coefficient = lr.coef_[0]
intercept = lr.intercept_

# Display Output
print(f"Regression Coefficient =  {regression_coefficient:5.2f} ")
print(f"Intercept is: { intercept : 5.2f}" )
print()
print(f"Regression Equation is: Y = {regression_coefficient:5.2f} X + { intercept : 5.2f}")
print()

# Do Prediction
predicted_value = lr.predict([[11]])[0]
print(f"Predicted Value is: { predicted_value: 5.2f}")
print()

# Calculate R2 Score
Y_pred = lr.predict(X)
from sklearn.metrics import r2_score
print(f"Accuracy is: {r2_score(Y, Y_pred):5.2f}")
print()

# Visualize the Regression Line
plt.scatter(X,Y,color = 'red')
plt.plot(X,lr.predict(X), color = 'blue')
plt.show()

# Example 15.3
# Simple Linear Regression - Example 3
# Import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Read Data from a CSV File
df = pd.read_csv('Salary_Data.csv')
X = df.iloc[:, 0].values
Y = df.iloc[:, 1].values
X = X.reshape(-1, 1)

# Fit Simple Linear Regression Model
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X, Y)
regression_coefficient = lr.coef_[0]
intercept = lr.intercept_

# Display Output
print(f"Regression Coefficient =  {regression_coefficient:5.2f} ")
print(f"Intercept is: { intercept : 5.2f}" )
print()
print(f"Regression Equation is: Y = {regression_coefficient:5.2f} X + { intercept : 5.2f}")
print()

# Calculate R2 Score
Y_pred = lr.predict(X)
from sklearn.metrics import r2_score
print(f"Accuracy is: {r2_score(Y, Y_pred):5.2f}")
print()

# Visualize the Regression Line
plt.scatter(X,Y,color = 'red')
plt.plot(X,lr.predict(X), color = 'blue')
plt.show()

# Example 15.4
# Multiple Regression - Prediction of Cut_off Mark
# Import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Read data from a CSV file
df = pd.read_csv('Mark_Data.csv')
X = df.iloc[:,1:4].values
Y = df.iloc[:,4].values

# Fit Multiple Linear Regression Model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X, Y)
print(f"Regression Coefficients are: {regressor.coef_}")
print()

# Calculate Accuracy
from sklearn.metrics import r2_score
Y_pred = regressor.predict(X)
print(f"Accuracy is: {r2_score(Y, Y_pred):5.2f}")
print()

# Do Prediction
dictionary1 = { 'Maths' : [190,180,200],
                'Physics' : [180,170,170],
               'Chemistry': [180,170,170]
               }
df1 = pd.DataFrame (dictionary1)
X = df1.iloc[:, :].values
predicted_values = regressor.predict(X)
print(f"Predicted Cut-off marks are: {predicted_values}")

# Example 15.5
# Multiple Regression  - Predicting house price using Boston Data Set
# Import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Read data from a CSV file
df = pd.read_csv('boston.csv')
# X = df.drop('MV', axis =1).values
# Y = df.MV.values
X = df.iloc[: , 1:7].values
Y = df.iloc[: , 0].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fit Multiple Linear Regression Model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, Y_train)
print(f"Regression Coefficients are: {regressor.coef_}")
print()

# Calculate Accuracy
from sklearn.metrics import r2_score
print(f"Accuracy Score is: {r2_score(Y_test, regressor.predict(X_test))}")
print()

# Do Prediction
dictionary1 = { 'INDUS' : [2.32,7.06,7.07],
                'NOX' : [53.9,47.0,46.9],
               'RM': [6.675,6.521,7.280],
               'TAX' : [290,240,242],
               'PT' : [15,17.9,17.8],
               'LSTAT' : [5,9,4]
              }
df1 = pd.DataFrame (dictionary1)
X1 = df1.iloc[:, :].values
X1 = sc.fit_transform(X1)
predictedValues = regressor.predict(X1)
print(predictedValues)

#Example 16.1
# Simple Classification using Logistic Regression
# Import the Libraries
import numpy as np

# Specify Data
salary = [45000,40000,35000,30000,42000,37000,43000,38000,41000,44000,90000,80000,70000,60000,95000,85000,75000,65000,84000,92000]
vehicle_type = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]
salary = np.array(salary)
salary = salary.reshape(-1,1)

# Transform the Data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
salary = sc.fit_transform(salary)

# Fit Logistic Regression Model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(salary, vehicle_type)

# Predict the Results
predicted_values = classifier.predict(salary)
print(predicted_values)
print()

# Calculate Accuracy
from sklearn import metrics
predicted_values = classifier.predict(salary)
print("F-Score: ", metrics.f1_score(vehicle_type, predicted_values, average = 'weighted'))

#Example 16.2
# Classification Example 2 - Logistic Regression

# Import the libraries
import numpy as np
import pandas as pd

# Read data from a CSV file
df = pd.read_csv('VehicleData1.csv')
X = df["salary"].values
y = df["vehicle_type"].values
X = X.reshape(-1, 1)

# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

# Fit Logistic Regression Model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(X, y)

# Find Accuracy Score and Confusion Matrix
from sklearn.metrics import accuracy_score, classification_report
y_pred = classifier.predict(X)
print(y_pred)
print()
print(accuracy_score(y, y_pred))
print()
print(classification_report(y, y_pred))
print()
from sklearn import metrics
print("F-Score: ", metrics.f1_score(y, y_pred, average = 'weighted'))
print()

# Do Prediction

X = [75000,92000,31000]
X = np.array(X)
X = X.reshape(-1,1)
X = sc.fit_transform(X)
predictedValues = classifier.predict(X)
print(predictedValues)

#Example 16.3
# Classification example 3 - Logistic Regression
# Import the libraries
import numpy as np
import pandas as pd

# Read data from a CSV file
dataset = pd.read_csv('Health_Data.csv')

# Define independent variables & dependent variable
X = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

# Fit Logistic Regression Classification Model
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(X, y)

# Calculate Accuracy
from sklearn import metrics
y_pred = classifier.predict(X)
print("F-Score: " , metrics.f1_score(y, y_pred, average = 'weighted'))
print()

# Do Prediction
testInput = { 'Height' : [174,189,185], 'Weight' : [96,87,110] }
testData = pd.DataFrame (testInput)
X = testData.iloc[:, :].values
X = sc.fit_transform(X)
predictedValue = classifier.predict(X)
print(predictedValue)

# Example 16.4

# Import the libraries
import mglearn
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

X, y = mglearn.datasets.make_forge()

classifier = LogisticRegression()
cr = classifier.fit(X,y)

mglearn.plots.plot_2d_separator(cr, X,fill = False, eps = 0.5)
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)
plt.title("Logistic Regression Classifier")
plt.xlabel("Salary")
plt.ylabel("Vehicle Type")
plt.show()

# Example 17.1
# Clustering
#Import the Libraries
import numpy as np

# Specify Data
salary = [45000,40000,35000,30000,42000,37000,43000,38000,41000,44000,90000,80000,70000,60000,95000,85000,75000,65000,84000,92000,190000,180000,170000,160000,195000,185000,175000,165000,184000,192000]
car_type =[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]
salary = np.array(salary)
salary = salary.reshape(-1,1)

# Transform Data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
salary = sc.fit_transform(salary)

# Apply K-Means Technique to the given dataset
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 0)
y_kmeans = kmeans.fit_predict(salary)
print(y_kmeans)

# Example 17.2
# K-Means Clustering

# Import the libraries
import numpy as np
import pandas as pd

# Read data from a CSV file
dataset = pd.read_csv('VehicleData2.csv')
#X = dataset.iloc[:, 0:-1]
X = dataset.iloc[:, 0].values
X = X.reshape(-1,1)

# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)


# Fit K-Means Model to the dataset
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters = 3, init = 'k-means++')
y_kmeans = kmeans.fit_predict(X)
print(y_kmeans)

# Example 17.3
# K-Means Clustering

# Import the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read the Data
dataset = pd.read_csv('DriverData.csv')

# Define the Independent variables
X = dataset.iloc[:, [2, 3]].values

# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)


# Fit Clustering Model using K-Means Technique
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 0)
y_kmeans = kmeans.fit_predict(X)

# Visualise the clusters
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of Drivers')
plt.xlabel('Concentration Score (Score1)')
plt.ylabel('Response Score (Score2)')
plt.legend()
plt.show()

# Example 17.4
# K-Means Clustering

# Import the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read data from a CSV file
dataset = pd.read_csv('Mall_Customers.csv')
X = dataset.iloc[:, [3, 4]].values


# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

# Use the Elbow method to find the optimal number of clusters
from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Fit K-Means Model to the dataset
kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 0)
y_kmeans = kmeans.fit_predict(X)

# Visualise the clusters
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title("Clusters of customers")
plt.xlabel("Annual Income ('000)")
plt.ylabel("Spending Score (1-100)")
plt.legend()
plt.show()

# Example 17.5
# Hierarchical Clustering
# Import the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read data from a CSV file
dataset = pd.read_csv('Mall_Customers.csv')
X = dataset.iloc[:, [3, 4]].values

# Do Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

# Use Dendrogram to identify clusters
import scipy.cluster.hierarchy as sch
dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()





